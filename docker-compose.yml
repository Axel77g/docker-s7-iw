services:
  # installation composer dependencies
  composer:
    image: axel77g/composer-tp-docker-esgi:latest
    platform: linux/amd64
    #build:
    #  context: docker/composer
    #  dockerfile: composer.Dockerfile
    volumes:
      - ./:/var/www/html
    networks:
      - dockerNetwork
  # database postgres service
  postgres:
    image: axel77g/postgres-tp-docker-esgi:latest
    platform: linux/amd64
    #build:
    #  context: docker/postgres
    #  dockerfile: postgres.Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-testing}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testing}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    networks:
      - dockerNetwork
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-testing} -d ${POSTGRES_DB:-postgres}",
        ]
      interval: 10s
      timeout: 5s
      retries: 6
  # symfony service
  symfony:
    image: axel77g/symfony-tp-docker-esgi:latest
    platform: linux/amd64
    #build:
    #  context: docker/symfony
    #  dockerfile: symfony.Dockerfile
    volumes:
      - ./:/var/www/html
    depends_on:
      postgres:
        condition: service_healthy
      composer:
        condition: service_completed_successfully
    ports:
      - 8000:8000
    networks:
      - dockerNetwork
  # database adminer service
  adminer:
    image: axel77g/adminer-tp-docker-esgi:latest
    platform: linux/amd64
    #build:
    #    context: docker/adminer
    #    dockerfile: adminer.Dockerfile
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dockerNetwork
networks:
  dockerNetwork:
    driver: bridge
volumes:
  postgres:
